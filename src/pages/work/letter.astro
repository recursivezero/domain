---
import "@/assets/styles/letter.css";
import BaseLayout from "@/layouts/BaseLayout";

export const frontmatter = {
  title: "Interactive Letter",
  description: "An interactive letter with sound effects and background options",
  image: "/og-images/letter.png",
  date: "2023-10-01"
};
---

<style>
  :root {
    --red: #ff0000;
    --green: #00ff00;
    --blue: #0000ff;
    --yellow: #ffff00;
    --magenta: #ff00ff;
  }

  #bgSelector {
    padding: 8px;
    border: 2px solid #ddd;
    border-radius: 4px;
    font-size: 16px;
    appearance: none; /* Removes default styling */
    -webkit-appearance: none; /* For Safari */
  }

  select option:hover {
    box-shadow: 0 0 10px 100px #000 inset;
  }

  select option:checked {
    background: linear-gradient(#000, #000);
  }

  .bg__selector {
    display: grid;
    grid-auto-flow: column;
    gap: 4px;
    grid-auto-columns: max-content;
    & div {
      cursor: pointer;
      border-radius: 2px;
      width: 3rem;
      aspect-ratio: 1;
      padding: 0.5rem;
      display: grid;
      place-content: center;
    }
  }
</style>

<BaseLayout meta={{ title: "Interactive Letter" }}>
  <div class="controls" id="controls">
    <div class="control-group">
      <div class="custom-select">
        <div id="bgSelector" class="bg__selector">
          <div data-value="#ff0000" style="background-color: #ff0000;"></div>
          <div data-value="#00ff00" style="background-color: #00ff00;"></div>
          <div data-value="#0000ff" style="background-color: #0000ff;"></div>
          <div data-value="#ffff00" style="background-color: #ffff00;"></div>
          <div data-value="#ff00ff" style="background-color: #ff00ff;"></div>
        </div>
      </div>
    </div>

    <div class="control-group">
      <label for="fontSelector">Font</label>
      <select id="fontSelector">
        <option value="Arial">Arial</option>
        <option value="Georgia">Georgia</option>
        <option value="Times New Roman">Times New Roman</option>
      </select>
      <input type="color" id="colorPicker" value="#000000" />
    </div>
  </div>

  <div class="letter-container" id="letterContainer">
    <div class="big-letter" id="bigLetter">A</div>
  </div>

  <div class="meaning-section">
    <h2>Meaning</h2>
    <article class="detail">The letter 'A' stands for...</article>
    <section class="meaning-content">
      <p>First letter of the English alphabet</p>
      <p>Represents excellence in grading systems</p>
      <p>Phonetically represents various sounds across languages</p>
      <p>Historical origins trace back to ancient Phoenician alphabet</p>
      <!-- Add more meaning content as needed -->
    </section>
  </div>
</BaseLayout>

<script>
  // DOM Elements
  const controls = document.getElementById("controls") as HTMLElement;
  const bigLetter = document.getElementById("bigLetter") as HTMLElement;
  const letterContainer = document.getElementById("letterContainer") as HTMLElement;
  //const bgSelector = document.getElementById("bgSelector") as HTMLInputElement;
  const fontSelector = document.getElementById("fontSelector") as HTMLInputElement;
  const colorPicker = document.getElementById("colorPicker") as HTMLInputElement;
  const toggleBg = document.getElementById("toggleBg") as HTMLButtonElement;

  //const selectSelected = document.querySelector(".select-selected");
  const selectItems = document.querySelectorAll("#bgSelector div");

  // Event Listeners
  document.addEventListener("keydown", handleKeyPress);
  //bgSelector?.addEventListener("input", updateBackground);
  fontSelector?.addEventListener("change", updateFont);
  colorPicker?.addEventListener("input", updateColor);
  toggleBg?.addEventListener("click", toggleBackground);

  // Hover effect for options
  selectItems.forEach((item) => {
    // Preview color on hover
    item.addEventListener("mouseenter", function (e: any) {
      letterContainer.style.backgroundColor = e.target.getAttribute("data-value");
    });
    item.addEventListener("click", function (e: any) {
      letterContainer.style.backgroundColor = e.target.getAttribute("data-value");
    });
  });

  // Handle key press
  function handleKeyPress(e: KeyboardEvent) {
    if (e.key.toLowerCase() === "a") {
      bigLetter.style.animation = "letterPop 0.3s ease-out";
      setTimeout(() => {
        bigLetter.style.animation = "";
      }, 300);
    }
  }

  // Update functions
  //function updateBackground() {
  //  letterContainer.className = "letter-container";
  //  if (bgSelector.value !== "none") {
  //    letterContainer.style.backgroundColor = bgSelector.value;
  //  }
  //}

  function updateFont() {
    bigLetter.style.fontFamily = fontSelector.value;
  }

  function updateColor() {
    bigLetter.style.color = colorPicker.value;
  }

  function toggleBackground() {
    letterContainer.classList.toggle("no-background");
  }

  // Intersection Observer for sticky header
</script>
